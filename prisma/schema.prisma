generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  name              String
  email             String       @unique
  password          String
  role              String?      @default("user")
  createdAt         DateTime     @default(now())
  isVerified        Boolean      @default(false)
  verificationToken String
  updatedAt         DateTime     @updatedAt
  resetToken        String?
  resetTokenExpired DateTime?
  gender            String
  about             String
  bio               String      
  avatar            String
  categories        String?
  statusBook        Boolean      @default(false)
  loveStatus        Boolean      @default(false) 

  bookingsAsDoctor  Booking[]     @relation("DoctorBookings")
  bookingsAsPatient Booking[]     @relation("PatientBookings")

  loveDoc           LoveDoctor[]  @relation("DoctorLove")
  userLove          LoveDoctor[]  @relation("UserLove")

  loveDocProf       Profile[]     @relation("DoctorLove")
  userLoveProf      Profile[]     @relation("UserLove")
}

model LoveDoctor {
  id         Int      @id @default(autoincrement())
  userId     Int
  doctorId   Int
  createdAt  DateTime @default(now())
  loveStatus Boolean  @default(false)
  
  user       User     @relation("DoctorLove", fields: [doctorId], references: [id])
  doctor     User     @relation("UserLove", fields: [userId], references: [id])

  @@unique([userId, doctorId])
  @@index([doctorId], map: "LoveDoctor_doctorId_fkey")
}

model PendingUser {
  id                Int      @id @default(autoincrement())
  role              String?  @default("user")
  name              String
  email             String   @unique
  password          String
  verificationToken String   @unique
  createdAt         DateTime @default(now())
  about             String
  bio               String
  categories        String
  gender            String
  avatar            String
}

model Profile {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  doctorId     Int    
  bio        String?
  // avatar     String
  gender     String
  role       String?
  about      String
  categories String
  loveStatus Boolean  @default(false)
  // userProf   User?


  user       User     @relation("UserLove", fields: [userId], references: [id])
  doctor     User     @relation("DoctorLove", fields: [doctorId], references: [id])

  @@unique([userId, doctorId])
}

model Booking {
  id           Int            @id @default(autoincrement())
  userId       Int
  doctorId     Int
  dateTime     DateTime
  status       String         @default("pending")
  doctor       User           @relation("DoctorBookings", fields: [doctorId], references: [id])
  user         User           @relation("PatientBookings", fields: [userId], references: [id])
  notification Notification[]

  @@index([doctorId], map: "Booking_doctorId_fkey")
  @@index([userId], map: "Booking_userId_fkey")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  bookingId Int?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  booking   Booking? @relation(fields: [bookingId], references: [id])

  @@index([bookingId], map: "Notification_bookingId_fkey")
}
